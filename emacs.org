#+STARTUP: overview
#+TITLE: AAA Emacs
#+CREATOR: Abhishek Anand Amralkar
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
* Installation

git clone https://github.com/abhishekamralkar/aaaemacs ~/.emacs.d

To use you should remove your own ~/.emacs and your ~/.emacs.d prior to cloning this configuration. 

* About ME

#+begin_src emacs-lisp
(setq user-full-name "Abhishek Anand Amralkar"
      user-mail-address "abhishekamralkar@gmail.com")
#+end_src

* Use-Package

The use-package macro allows you to isolate package configuration in your .emacs file in a way that is both performance-oriented and, well, tidy. 

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org"   . "https://orgmode.org/elpa/")
                         ("elpa"  . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
(package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
(package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
(require 'org-tempo)
#+end_src

#+RESULTS:
: org-tempo

* Auto Tangle
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda () (add-hook 'after-save-hook #'org-babel-tangle
                          :append :local)))
#+end_src

* Theme

#+begin_src emacs-lisp 
(use-package zerodark-theme
  :ensure t
  :init
    (load-theme 'zerodark t))
#+end_src

* Fonts

#+begin_src emacs-lisp
(font-family-list)
(add-to-list 'default-frame-alist
     (cond
         ((string-equal system-type "darwin")    '(font . "Fira Code-14"))
         ((string-equal system-type "gnu/linux") '(font . "Fira Code-12"))))

(use-package ac-emoji
  :ensure t)

(set-fontset-font
  t 'symbol
(font-spec :family "Symbola") nil 'prepend)
#+end_src

* UI Look and Feel 

** No Startup screen

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

** Disable menus and scrollbars
If you like using any of those, change -1 to 1.

#+begin_src emacs-lisp 
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

#+RESULTS:

** No Bells

#+begin_src 
(setq ring-bell-function 'ignore)   
#+end_src

** Set UTF-8 encoding

#+begin_src emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)   
#+end_src

** Highligh current line

this is really awesome 

#+begin_src emacs-lisp
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+end_src

** Pretty Symbols

#+begin_src emacs-lisp
(when window-system
      (use-package pretty-mode
      :ensure t
      :config
      (global-pretty-mode t)))   
#+end_src

** No backups please

#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)   
#+end_src

** y for yes and n for no

#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)   
#+end_src

** Async

Lets us use asynchronous processes wherever possible, pretty useful.

#+begin_src emacs-lisp
(use-package async
  :ensure t
  :init (dired-async-mode 1))
#+end_src


** Command Log Mode

Displays the key bindging

#+begin_src emacs-lisp
(use-package command-log-mode
  :commands command-log-mode)
#+end_src

#+RESULTS:

* Projectile

Projectile is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a project level without introducing external dependencies (when feasible).

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
    (projectile-mode 1))
#+end_src

* Dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
    (dashboard-setup-startup-hook))
  #+end_src
* Modeline

With modeline we can enhance the Emacs look and feel. Spacemacs spaceline is awesome.

#+begin_src emacs-lisp
(use-package spaceline
  :ensure t
  :config
  (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    (setq spaceline-line-column-p nil)
    (setq spaceline-line-p nil)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))  
#+end_src

** No Separator

#+begin_src emacs-lisp
(setq powerline-default-separator nil)   
#+end_src

** Cursor Position

Show the current line and column for your cursor.

#+begin_src emacs-lisp
(setq line-number-mode t)
(setq column-number-mode t)
#+end_src

** Clock

Good to have time in your editor

#+begin_src emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M - %d %B %Y")
(display-time-mode 1)
#+end_src

** Battery

Good to have

#+begin_src emacs-lisp
(use-package fancy-battery
  :ensure t
  :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 15)
    (if window-system
      (fancy-battery-mode)
      (display-battery-mode)))
#+end_src

* Ivy

Ivy is an interactive interface for completion in Emacs. Emacs uses completion mechanism in a variety of contexts: code, menus, commands, variables, functions, etc. Completion entails listing, sorting, filtering, previewing, and applying actions on selected items. When active, ivy-mode completes the selection process by narrowing available choices while previewing in the minibuffer. Selecting the final candidate is either through simple keyboard character inputs or through powerful regular expressions.

#+begin_src emacs-lisp
(use-package ivy
  :ensure t)
(setq scroll-conservatively 100)
#+end_src

* Which Key

which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup. For example, after enabling the minor mode if you enter C-x and wait for the default of 1 second the minibuffer will expand with all of the available key bindings that follow C-x (or as many as space allows given your settings).

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
    (which-key-mode))
#+end_src


* Swiper

Swiper is an alternative to isearch that uses Ivy to show an overview of all matches.

#+begin_src emacs-lisp
(use-package swiper
  :ensure t
  :bind ("C-s" . 'swiper))
#+end_src

* Programming and Development Tools

** Electric

Electric Pair mode, a global minor mode, provides a way to easily insert matching delimiters: parentheses, braces, brackets, etc. Whenever you insert an opening delimiter, the matching closing delimiter is automatically inserted as well, leaving point between the two. 

#+begin_src emacs-lisp
(setq electric-pair-pairs '(
                           (?\{ . ?\})
                           (?\( . ?\))
                           (?\[ . ?\])
                           (?\" . ?\")
                           ))   
(electric-pair-mode t)
#+end_src

** Beacon

Beacon- Whenever the window scrolls a light will shine on top of your cursor so you know where it is.

#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :config
    (beacon-mode 1))
#+end_src

** Show parens

Highlights matching parens when the cursor is just behind one of them.

#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

** Rainbow Delimeter

Colors parentheses and other delimiters 

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** Yasnippet

Code template

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+end_src

** Flycheck

flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t)
#+end_src

** lsp-mode

   #+begin_src emacs-lisp
   (defun lsp-mode-setup ()
     (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
     (lsp-headerline-breadcrumb-mode))

   (use-package lsp-mode
     :commands (lsp lsp-deferred)
     :hook (lsp-mode . lsp-mode-setup)
     :init
     (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
     :config
     (lsp-enable-which-key-integration t))
   #+end_src

** lsp-ui

   #+begin_src emacs-lisp
   (use-package lsp-ui
     :hook (lsp-mode . lsp-ui-mode)
     :custom
     (lsp-ui-doc-position 'bottom))
   #+end_src

** lsp-treemacs

   #+begin_src emacs-lisp
   (use-package lsp-treemacs
     :after lsp)
   #+end_src

** lsp-ivy

   #+begin_src emacs-lisp
   (use-package lsp-ivy
     :after lsp)
   #+end_src

** Edit Config

Edit emacs config

#+begin_src emacs-lisp
(defun config-edit ()
  (interactive)
  (find-file "~/.emacs.d/emacs.org"))
(global-set-key (kbd "C-c e") 'config-edit)
#+end_src>

** Config Reload

Reload config

#+begin_src emacs-lisp
(defun config-reload ()
  "Reloads ~/.emacs.d/emacs.org at runtime"
  (interactive)
  (org-babel-load-file (expand-file-name "~/.emacs.d/emacs.org")))
(global-set-key (kbd "C-c r") 'config-reload)
#+end_src

** Python

Python editor

#+begin_src emacs-lisp
(add-hook 'python-mode-hook 'yas-minor-mode)
(add-hook 'python-mode-hook 'flycheck-mode)

(with-eval-after-load 'company
    (add-hook 'python-mode-hook 'company-mode))

(use-package company-jedi
  :ensure t
  :config
    (require 'company)
    (add-to-list 'company-backends 'company-jedi))

(defun python-mode-company-init ()
  (setq-local company-backends '((company-jedi
                                  company-etags
                                  company-dabbrev-code))))

(use-package company-jedi
  :ensure t
  :config
    (require 'company)
    (add-hook 'python-mode-hook 'python-mode-company-init))
#+end_src

** Emacs Lisp

Emacs Lisp editor

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'company-mode)

(use-package slime
  :ensure t
  :config
  (setq inferior-lisp-program "/usr/bin/sbcl")
  (setq slime-contribs '(slime-fancy)))

(use-package slime-company
  :ensure t
  :init
    (require 'company)
    (slime-setup '(slime-fancy slime-company)))
#+end_src


** Bash

Scripting

#+begin_src emacs-lisp
(add-hook 'shell-mode-hook 'yas-minor-mode)
(add-hook 'shell-mode-hook 'flycheck-mode)
(add-hook 'shell-mode-hook 'company-mode)

(defun shell-mode-company-init ()
  (setq-local company-backends '((company-shell
                                  company-shell-env
                                  company-etags
                                  company-dabbrev-code))))

(use-package company-shell
  :ensure t
  :config
    (require 'company)
    (add-hook 'shell-mode-hook 'shell-mode-company-init))
#+end_src
