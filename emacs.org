#+title: Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* About Me  

  #+begin_src emacs-lisp
  (setq user-full-name "Abhishek Anand Amralkar"
        user-mail-address "abhishekamralkar@gmail.com")
  #+end_src

* Tangle It
 
  #+begin_src emacs-lisp
  (defun org-babel-tangle-config() 
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/emacs.org"))
      (let ((org-config-babel-evaluate nil))
        (org-babel-tangle))))

   (add-hook 'org-mode-hook
              (lambda ()
                 (add-hook 'after-save-hook #'org-babel-tangle-config)))
  #+end_src

* Packages
  
  Melpa Source repo for the package installation.

  #+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
  (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (require 'org-tempo)
  #+end_src

**  Automatic Package Update
  
  #+begin_src emacs-lisp
    (use-package auto-package-update
      :custom
      (auto-package-update-interval 7)
      (auto-package-update-prompt-before-update t)
      (auto-package-update-hide-results t)
      :config
      (auto-package-update-maybe)
      (auto-package-update-at-time "09:00"))
  #+end_src

* Emacs Interface Tweaks
  
  Make Emacs UI elegant.
** UI Tweaks

  #+begin_src emacs-lisp
  (setq inhibit-startup-message 1)
  (set-buffer-modified-p 1)
  (tool-bar-mode 0)
  (tooltip-mode 0)
  (fset 'yes-or-no-p 'y-or-n-p)
  (menu-bar-mode 0)
  (column-number-mode 0)
  (show-paren-mode 1)
  (setq require-final-newline 1)
  (setq display-time-24hr-format 1)
  (setq battery-mode-line-format "[%b%p%% %t]")
  (display-time-mode +1)
  (setq redisplay-dont-pause 1
      scroll-margin 1
      scroll-step 1
      scroll-conservatively 10000
      scroll-preserve-screen-position 1)
  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)
  #+end_src

** Display Line Number

   #+begin_src emacs-lisp
   ;; Disable line numbers for some modes
   (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook
                  compilation-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
    #+end_src

** Modeline
  
  doom-modeline is a better modeline

  #+begin_src emacs-lisp
  ;;M-x all-the-icons-install-fonts
  (use-package all-the-icons
    :ensure t)
  #+end_src

  #+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
  #+end_src

** Theme[s]

  #+begin_src emacs-lisp
  ;;(use-package zenburn-theme
  ;;:ensure t
  ;;:config (load-theme 'zenburn t))
  (use-package doom-themes
    :init (load-theme 'doom-material-dark t))
  ;;(use-package doom-themes
  ;;  :init (load-theme 'leuven t))
  #+end_src

** Fonts
   
  Fira Code font use when on Linux andd Fire code in macos.
  
  #+begin_src emacs-lisp
  (font-family-list)
  (add-to-list 'default-frame-alist
        (cond
           ((string-equal system-type "darwin")    '(font . "Fira Code-14"))
           ((string-equal system-type "gnu/linux") '(font . "Fira Code-12"))))
  #+end_src
** Org Bullets

  Package to get nice bullets while in org-mode.

  #+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
  #+end_src

* Misc Packages
** Beacon Mode
   beacon-mode flashes the cursor whenever you scroll. It makes things easy to locate the cursor when scrolling

   #+begin_src emacs-lisp
   (use-package beacon
     :ensure t
     :config
     (beacon-mode 1))
   #+end_src

** Undo Tree

   #+begin_src emacs-lisp
   (use-package undo-tree
     :ensure t
     :init
     (global-undo-tree-mode))
   #+end_src:  

** Try

   Nice to have a package, if you do want to try packages before installation.

   #+begin_src emacs-lisp
   (use-package try
     :ensure t)
   #+end_src

** Which Key

   A useful package to show the key-bindings.

   #+begin_src emacs-lisp
   (use-package which-key
     :ensure t
     :config (which-key-mode))
   #+end_src

** general
   
   #+begin_src emacs-lisp
   (use-package general
     :ensure t)
   #+end_src

** Ace Window

   #+begin_src emacs-lisp
   (use-package ace-window
     :ensure t
     :init
      (progn
       (setq aw-scope 'global) ;; was frame
       (global-set-key (kbd "C-x O") 'other-frame)
       (global-set-key [remap other-window] 'ace-window)
       (custom-set-faces
       '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
   #+end_src 

** FZF

   #+begin_src emacs-lisp
   (use-package fzf :ensure t)
   #+end_src
 
** PATH

   #+begin_src emacs-lisp
   (use-package exec-path-from-shell
     :ensure t
     :config
     (exec-path-from-shell-initialize))
   #+end_src
 
* Counsel/Ivy/Swiper

  #+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
     :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
       	 ("C-r" . swiper)
 	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
    :config
  (progn
    (ivy-mode)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
  ))
  #+end_src

* Programming  
** lsp-mode

   #+begin_src emacs-lisp
   (defun lsp-mode-setup ()
     (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
     (lsp-headerline-breadcrumb-mode))

   (use-package lsp-mode
     :commands (lsp lsp-deferred)
     :hook (lsp-mode . lsp-mode-setup)
     :init
     (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
     :config
     (lsp-enable-which-key-integration t))
   #+end_src

** lsp-ui

   #+begin_src emacs-lisp
   (use-package lsp-ui
     :hook (lsp-mode . lsp-ui-mode)
     :custom
     (lsp-ui-doc-position 'bottom))
   #+end_src

** lsp-treemacs

   #+begin_src emacs-lisp
   (use-package lsp-treemacs
     :after lsp)
   #+end_src

** lsp-ivy

   #+begin_src emacs-lisp
   (use-package lsp-ivy
     :after lsp)
   #+end_src

** Dap-Mode

   #+begin_src emacs-lisp
   (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)
     :commands dap-debug
     :config
    ;; Set up Node debugging
     (require 'dap-node)
     (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    ;; Bind `C-c l d` to `dap-hydra` for easy access
     (general-define-key
       :keymaps 'lsp-mode-map
       :prefix lsp-keymap-prefix
       "d" '(dap-hydra t :wk "debugger")))
    #+end_src

** Python

   Make sure you have the pyls language server installed before trying lsp-mode!

   #+begin_src sh
   pip3 install --user "python-language-server[all]"
   #+end_src>
   

   #+begin_src emacs-lisp
   (use-package python-mode
     :ensure t
     :hook (python-mode . lsp-deferred)
     :custom
     ;; NOTE: Set these if Python 3 is called "python3" on your system!
     (python-shell-interpreter "python3")
     (dap-python-executable "python3")
     (dap-python-debugger 'debugpy)
     :config
     (require 'dap-python))
   #+end_src
   
   #+begin_src emacs-lisp
   (use-package pyvenv
     :after python-mode
     :config
     (pyvenv-mode 1))
   #+end_src

** Company Mode
  
   #+begin_src emacs-lisp
   (use-package company
     :after lsp-mode
     :hook (lsp-mode . company-mode)
     :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
           (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
     :custom
           (company-minimum-prefix-length 1)
           (company-idle-delay 0.0))

   (use-package company-box
     :hook (company-mode . company-box-mode))
   #+end_src
   
** Projectile

  #+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy))
  
  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
  #+end_src
  
** Magit

  Its name should be Magic
  
  #+begin_src emacs-lisp
    (use-package magit
      :ensure t)
      
    (use-package forge
      :ensure t
      :after magit)
  #+end_src

** golang
 
   #+begin_src sh
   go get -u golang.org/x/tools/godef
   go get -u golang.org/x/tools/goimports
   go get -u golang.org/x/tools/guru
   #+end_src

   #+begin_src emacs-lisp
   (setq exec-path (append exec-path '("/usr/local/go/bin/go")))
   (setq exec-path (append exec-path '("/usr/bin/gopls")))

   (defun lsp-go-install-save-hooks ()
      (add-hook 'before-save-hook #'lsp-format-buffer t t)
      (add-hook 'before-save-hook #'lsp-organize-imports t t))

   (use-package go-mode 
     :ensure t
     :config
     (add-hook 'go-mode-hook #'lsp)
     (require 'dap-dlv-go)
   
     (add-hook 'before-save-hook 'gofmt-before-save) ; run gofmt on each save
     (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
     (add-hook 'go-mode-hook #'lsp-deferred))
   #+end_src

   #+begin_src emacs-lisp
   (use-package go-eldoc
     :ensure t
     :config
     (go-eldoc-setup))
   #+end_src

   #+begin_src emacs-lisp
   (use-package exec-path-from-shell
     :ensure t)
   #+end_src
   
   #+begin_src emacs-lisp
   (use-package go-guru
     :ensure t
     :config
     ;; Search entire workspace
     (customize-set-variable 'go-guru-scope "...")
     (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))
   #+end_src

   autocompletion go

   #+begin_src sh
   go get -u github.com/nsf/gocode
   #+end_src

   #+begin_src emacs-lisp
   (use-package company-go
     :ensure t
     :config
     (add-hook 'go-mode-hook (lambda ()
                            (set (make-local-variable 'company-backends)
                                 '(company-go))
                            (company-mode))))
   #+end_src
   
   #+begin_src emacs-lisp
   (use-package gotest
     :ensure t
     :bind (:map go-mode-map
              ("C-c C-t p" . go-test-current-project)
              ("C-c C-t f" . go-test-current-file)
              ("C-c C-t ." . go-test-current-test)
              ("C-c r" . go-run))
     :config
     (setq go-test-verbose t))
   #+end_src
 
** Rainbow Delimiter

  #+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  #+end_src

** FlyCheck
  
   #+begin_src emacs-lisp
   (use-package flycheck
     :ensure t
     :init
     (global-flycheck-mode t)) 
   #+end_src

** Yasnippet

   #+begin_src emacs-lisp
   (use-package yasnippet
     :ensure t
     :init
    (yas-global-mode 1))
   #+end_src
  
** Electric Pair Mode

   #+begin_src emacs-lisp
   (electric-pair-mode 1)
   (setq electric-pair-preserve-balance nil)
   ;;(global-electric-pair-mode t)
   #+end_src

** Vterm
 
   A better terminal as compared to Eshell

   #+begin_src emacs-lisp
   (use-package vterm
     :commands vterm
     :config
     (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
     ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
     (setq vterm-max-scrollback 10000))
   #+end_src

** Clojure

   #+begin_src emacs-lisp
    (use-package clojure-mode
      :defer t
      :ensure t)

   (use-package cider
     :ensure t)

   (use-package clj-refactor
     :ensure t
     :config
     (add-hook 'clojure-mode-hook (lambda ()
                                   (clj-refactor-mode 1)
                                   ))
     (cljr-add-keybindings-with-prefix "C-c C-m")
     (setq cljr-warn-on-eval nil)
      :bind ("C-c '" . hydra-cljr-help-menu/body))
    #+end_src

** Rust

   #+begin_src emacs-lisp
   (use-package racer
     :ensure t
     :config
     (add-hook 'racer-mode-hook #'company-mode)
     (setq company-tooltip-align-annotations t)
     (setq racer-rust-src-path "~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"))

   (use-package rust-mode
     :ensure t
     :config
     (add-hook 'rust-mode-hook #'racer-mode)
     (add-hook 'racer-mode-hook #'eldoc-mode)
     (setq rust-format-on-save t))

   (use-package cargo
     :ensure t
     :config
     (setq compilation-scroll-output t)
     (add-hook 'rust-mode-hook 'cargo-minor-mode))

   (use-package flycheck-rust
     :ensure t
     :config
     (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
     (add-hook 'rust-mode-hook 'flycheck-mode))
   #+end_src

* Infrastructure

** JSON-Mode

   #+begin_src emacs-lisp
   (use-package json-mode
     :ensure t
     :config
     (customize-set-variable 'json-mode-hook
                             #'(lambda ()
                                 (setq tab-width 2))))
   #+end_src

** YAML-Mode

   #+begin_src 
   (use-package yaml-mode
     :ensure t)
   #+end_src

** Docker

   #+begin_src emacs-lisp
   (use-package docker
     :ensure t
     :bind (("C-c d c" . docker-containers)
            ("C-c d i" . docker-images)))
   #+end_src

** Dockerfile

   #+begin_src emacs-lisp
   (use-package dockerfile-mode
     :ensure t)
   #+end_src

** Kubernetes

   #+begin_src emacs-lisp
   (use-package kubernetes
     :ensure t
     :commands (kubernetes-overview))
   #+end_src

* File Management

**  Dired

    Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:
    
*** Configuration

    #+begin_src emacs-lisp
    (use-package dired
      :ensure nil
      :commands (dired dired-jump)
      :bind (("C-x C-j" . dired-jump)))

    (use-package dired-single
      :commands (dired dired-jump))

    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode))
    #+end_src
