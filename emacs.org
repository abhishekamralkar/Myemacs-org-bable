#+STARTUP: overview
#+TITLE: MyEmacs
#+CREATOR: Abhishek Anand Amralkar
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
* Installation

git clone https://github.com/abhishekamralkar/aaaemacs ~/.emacs.d

To use you should remove your own ~/.emacs and your ~/.emacs.d prior to cloning this configuration. 

* About Me

#+begin_src emacs-lisp
(setq user-full-name "Abhishek Anand Amralkar"
      user-mail-address "abhishekamralkar@gmail.com")
#+en
* Use-Package

The use-package macro allows you to isolate package configuration in your .emacs file in a way that is both performance-oriented and, well, tidy. 

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org"   . "https://orgmode.org/elpa/")
                         ("elpa"  . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
(package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
(package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
(require 'org-tempo)
#+end_src

#+RESULTS:
: org-tempo

* Auto Tangle
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda () (add-hook 'after-save-hook #'org-babel-tangle
                          :append :local)))
#+end_src

* Theme

#+begin_src emacs-lisp 
;;(use-package zerodark-theme
;;  :ensure t
;;  :init
;;    (load-theme 'zerodark t))
#+end_src

#+begin_src emacs-lisp
;;(zerodark-setup-modeline-format)
#+end_src

#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-palenight t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

#+RESULTS:
: t

* Fonts

#+begin_src emacs-lisp
(font-family-list)
(add-to-list 'default-frame-alist
     (cond
         ((string-equal system-type "darwin")    '(font . "Fira Code-14"))
         ((string-equal system-type "gnu/linux") '(font . "Fira Code-13"))))

(use-package ac-emoji
  :ensure t)

(set-fontset-font
  t 'symbol
(font-spec :family "Symbola") nil 'prepend)
#+end_src

#+RESULTS:

* UI Look and Feel 

** No Startup screen

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

** Disable menus and scrollbars
If you like using any of those, change -1 to 1.

#+begin_src emacs-lisp 
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

#+RESULTS:

** No Bells

#+begin_src 
(setq ring-bell-function 'ignore)   
#+end_src

** Set UTF-8 encoding

#+begin_src emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)   
#+end_src

** Highligh current line

this is really awesome 

#+begin_src emacs-lisp
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+end_src

** Pretty Symbols

#+begin_src emacs-lisp
(when window-system
      (use-package pretty-mode
      :ensure t
      :config
      (global-pretty-mode t)))   
#+end_src

** No backups please

#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)   
#+end_src

** y for yes and n for no

#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)   
#+end_src

** Async

Lets us use asynchronous processes wherever possible, pretty useful.

#+begin_src emacs-lisp
(use-package async
  :ensure t
  :init (dired-async-mode 1))
#+end_src


** Command Log Mode

Displays the key bindging

#+begin_src emacs-lisp
(use-package command-log-mode
  :commands command-log-mode)
#+end_src

#+RESULTS:

* Projectile

Projectile is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a project level without introducing external dependencies (when feasible).

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
    (projectile-mode 1))
#+end_src

* Dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
    (dashboard-setup-startup-hook))
  #+end_src

#+begin_src emacs-lisp 
;; Set the title
(setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")

;; Content is not centered by default. To center, set
(setq dashboard-center-content t)

;; To disable shortcut "jump" indicators for each section, set
(setq dashboard-show-shortcuts nil)

(setq dashboard-items '((recents  . 5)
                        (bookmarks . 5)
                        (projects . 5)
                        (agenda . 5)
                        (registers . 5)))
#+end_src

* Modeline

With modeline we can enhance the Emacs look and feel. Spacemacs spaceline is awesome. I tried spaceline but doom-modeline is best.
This package is able to display icons if all-the-icons package and required fonts are installed. Run M-x all-the-icons-install-fonts to install the necessary fonts. Please refer to the installation guide.

#+begin_src emacs-lisp
;;(use-package spaceline
;;  :ensure t
;;  :config
;;  (require 'spaceline-config)
;;    (setq spaceline-buffer-encoding-abbrev-p nil)
;;    (setq spaceline-line-column-p nil)
;;    (setq spaceline-line-p nil)
;;    (setq powerline-default-separator (quote arrow))
;;    (spaceline-spacemacs-theme))
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t)
#+end_src

#+RESULTS:

** No Separator


#+begin_src emacs-lisp
(setq powerline-default-separator nil)   
#+end_src

** Cursor Position

Show the current line and column for your cursor.

#+begin_src emacs-lisp
(setq line-number-mode t)
(setq column-number-mode t)
#+end_src

** Clock

Good to have time in your editor

#+begin_src emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M - %d %B %Y")
(display-time-mode 1)
#+end_src

** Battery

Good to have

#+begin_src emacs-lisp
(use-package fancy-battery
  :ensure t
  :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 15)
    (if window-system
      (fancy-battery-mode)
      (display-battery-mode)))
#+end_src

* Ivy

Ivy is an interactive interface for completion in Emacs. Emacs uses completion mechanism in a variety of contexts: code, menus, commands, variables, functions, etc. Completion entails listing, sorting, filtering, previewing, and applying actions on selected items. When active, ivy-mode completes the selection process by narrowing available choices while previewing in the minibuffer. Selecting the final candidate is either through simple keyboard character inputs or through powerful regular expressions.

#+begin_src emacs-lisp
(use-package ivy
  :ensure t)
(setq scroll-conservatively 100)
#+end_src

* Which Key

which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup. For example, after enabling the minor mode if you enter C-x and wait for the default of 1 second the minibuffer will expand with all of the available key bindings that follow C-x (or as many as space allows given your settings).

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
    (which-key-mode))
#+end_src

* Swiper

Swiper is an alternative to isearch that uses Ivy to show an overview of all matches.

#+begin_src emacs-lisp
(use-package swiper
  :ensure t
  :bind ("C-s" . 'swiper))
#+end_src

* Helm

#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :bind
  ("C-x C-f" . 'helm-find-files)
  ("C-x C-b" . 'helm-buffers-list)
  ("M-x" . 'helm-M-x)
  :config
  (defun daedreth/helm-hide-minibuffer ()
    (when (with-helm-buffer helm-echo-input-in-header-line)
      (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
        (overlay-put ov 'window (selected-window))
        (overlay-put ov 'face
                     (let ((bg-color (face-background 'default nil)))
                       `(:background ,bg-color :foreground ,bg-color)))
        (setq-local cursor-type nil))))
  (add-hook 'helm-minibuffer-set-up-hook 'daedreth/helm-hide-minibuffer)
  (setq helm-autoresize-max-height 0
        helm-autoresize-min-height 40
        helm-M-x-fuzzy-match t
        helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match t
        helm-semantic-fuzzy-match t
        helm-imenu-fuzzy-match t
        helm-split-window-in-side-p nil
        helm-move-to-line-cycle-in-source nil
        helm-ff-search-library-in-sexp t
        helm-scroll-amount 8 
        helm-echo-input-in-header-line t)
  :init
  (helm-mode 1))

(require 'helm-config)    
(helm-autoresize-mode 1)
(define-key helm-find-files-map (kbd "C-b") 'helm-find-files-up-one-level)
(define-key helm-find-files-map (kbd "C-f") 'helm-execute-persistent-action)
#+end_src

* Programming and Development Tools

** Electric

Electric Pair mode, a global minor mode, provides a way to easily insert matching delimiters: parentheses, braces, brackets, etc. Whenever you insert an opening delimiter, the matching closing delimiter is automatically inserted as well, leaving point between the two. 

#+begin_src emacs-lisp
(setq electric-pair-pairs '(
                           (?\{ . ?\})
                           (?\( . ?\))
                           (?\[ . ?\])
                           (?\" . ?\")
                           ))   
(electric-pair-mode t)
#+end_src

** Beacon

Beacon- Whenever the window scrolls a light will shine on top of your cursor so you know where it is.

#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :config
    (beacon-mode 1))
#+end_src

** Show parens

Highlights matching parens when the cursor is just behind one of them.

#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

** Rainbow Delimeter

Colors parentheses and other delimiters 

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** Yasnippet

Code template

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+end_src

** Company

Company Mode
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3))
#+end_src

#+begin_src emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+end_src

** Flycheck

flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t)
#+end_src

** lsp-mode

   #+begin_src emacs-lisp
   (defun lsp-mode-setup ()
     (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
     (lsp-headerline-breadcrumb-mode))

   (use-package lsp-mode
     :commands (lsp lsp-deferred)
     :hook (lsp-mode . lsp-mode-setup)
     :init
     (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
     :config
     (lsp-enable-which-key-integration t))
   #+end_src

** lsp-ui

   #+begin_src emacs-lisp
   (use-package lsp-ui
     :hook (lsp-mode . lsp-ui-mode)
     :custom
     (lsp-ui-doc-position 'bottom))
   #+end_src

** lsp-treemacs

   #+begin_src emacs-lisp
   (use-package lsp-treemacs
     :after lsp)
   #+end_src

** lsp-ivy

   #+begin_src emacs-lisp
   (use-package lsp-ivy
     :after lsp)
   #+end_src

** Edit Config

Edit emacs config

#+begin_src emacs-lisp
(defun config-edit ()
  (interactive)
  (find-file "~/.emacs.d/emacs.org"))
(global-set-key (kbd "C-c e") 'config-edit)
#+end_src

** general
   
#+begin_src emacs-lisp
(use-package general
  :ensure t)
#+end_src

#+RESULTS:

** Config Reload

Reload config

#+begin_src emacs-lisp
(defun config-reload ()
  "Reloads ~/.emacs.d/emacs.org at runtime"
  (interactive)
  (org-babel-load-file (expand-file-name "~/.emacs.d/emacs.org")))
(global-set-key (kbd "C-c r") 'config-reload)
#+end_src

** Dap-Mode

#+begin_src emacs-lisp
(use-package dap-mode
   :commands dap-debug
   :config
     (require 'dap-node)
     (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    ;; Bind `C-c l d` to `dap-hydra` for easy access
     (general-define-key
       :keymaps 'lsp-mode-map
       :prefix lsp-keymap-prefix
       "d" '(dap-hydra t :wk "debugger")))
#+end_src

#+RESULTS:
: t

** Python

Make sure you have the pyls language server installed before trying lsp-mode!

#+begin_src sh
pip3 install --user "python-language-server[all]"
#+end_src>

#+begin_src emacs-lisp
(use-package python-mode
   :ensure t
   :hook (python-mode . lsp-deferred)
   :custom
       (python-shell-interpreter "python3")
       (dap-python-executable "python3")
       (dap-python-debugger 'debugpy)
   :config
       (require 'dap-python))
#+end_src
   
#+begin_src emacs-lisp
(use-package pyvenv
   :after python-mode
   :config
     (pyvenv-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package company-jedi
  :ensure t
  :config
  (add-to-list 'company-backends 'company-jedi))
#+end_src

** Emacs Lisp

Emacs Lisp editor

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'company-mode)

(use-package slime
  :ensure t
  :config
  (setq inferior-lisp-program "/usr/bin/sbcl")
  (setq slime-contribs '(slime-fancy)))

(use-package slime-company
  :ensure t
  :init
    (require 'company)
    (slime-setup '(slime-fancy slime-company)))
#+end_src

** Bash

Scripting

#+begin_src emacs-lisp
(add-hook 'shell-mode-hook 'yas-minor-mode)
(add-hook 'shell-mode-hook 'flycheck-mode)
(add-hook 'shell-mode-hook 'company-mode)

(defun shell-mode-company-init ()
  (setq-local company-backends '((company-shell
                                  company-shell-env
                                  company-etags
                                  company-dabbrev-code))))

(use-package company-shell
  :ensure t
  :config
    (require 'company)
    (add-hook 'shell-mode-hook 'shell-mode-company-init))
#+end_src

** Magic

Magit

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit))
  
(use-package forge
  :ensure t
  :after magit)
#+end_src

** Golang

;; gopls not able to find module in your workspace
;; You can run `M-x lsp-describe-session` to see your workspace folder(s), then use `M-x lsp-workspace-folders-remove` and `M-x lsp-workspace-folders-add` 

#+begin_src sh 
# GO Path
export GOROOT=/usr/local/go
export GOPATH=$HOME/Code/golang
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
#+end_src
   
#+begin_src sh
go install github.com/nsf/gocode@latest
go install github.com/rogpeppe/godef@latest
go install golang.org/x/tools/cmd/goimports@latest
go install golang.org/x/tools/gopls@latest
#+end_src

#+begin_src emacs-lisp
(setq exec-path (append exec-path '("/usr/local/go/bin/go")))
(setq exec-path (append exec-path '("/home/aaa/Code/golang/bin/gopls")))

(defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))

(use-package go-mode 
   :ensure t
   :config
     (add-hook 'go-mode-hook #'lsp)
     (require 'dap-dlv-go)
     (add-hook 'before-save-hook 'gofmt-before-save) ; run gofmt on each save
     (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
     (add-hook 'go-mode-hook #'lsp-deferred))
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp
(use-package go-eldoc
  :ensure t
  :config
     (go-eldoc-setup))
#+end_src

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package go-guru
  :ensure t
  :config
     (customize-set-variable 'go-guru-scope "...")
     (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))
#+end_src

autocompletion go

#+begin_src sh
go get -u github.com/nsf/gocode
#+end_src

#+begin_src emacs-lisp
(use-package company-go
  :ensure t
  :config
     (add-hook 'go-mode-hook (lambda ()
                            (set (make-local-variable 'company-backends)
                                 '(company-go))
                            (company-mode))))
#+end_src
   
#+begin_src emacs-lisp
(use-package gotest
  :ensure t
  :bind (:map go-mode-map
              ("C-c C-t p" . go-test-current-project)
              ("C-c C-t f" . go-test-current-file)
              ("C-c C-t ." . go-test-current-test)
              ("C-c r" . go-run))
  :config
     (setq go-test-verbose t))
#+end_src

#+begin_src emacs-lisp
(defun set-exec-path-from-shell-PATH ()
     (let ((path-from-shell (replace-regexp-in-string
                    "[ \t\n]*$"
                       ""
                       (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
   (setenv "PATH" path-from-shell)
   (setq eshell-path-env path-from-shell) ; for eshell users
   (setq exec-path (split-string path-from-shell path-separator))))
 
  (when window-system (set-exec-path-from-shell-PATH))
  (setenv "GOPATH" "/home/aaa/golang/src/github.com/abhishekamralkar/")
#+end_src

** Clojure

   #+begin_src emacs-lisp
    (use-package clojure-mode
      :defer t
      :ensure t)

   (use-package cider
     :ensure t)

   (use-package clj-refactor
     :ensure t
     :config
     (add-hook 'clojure-mode-hook (lambda ()
                                   (clj-refactor-mode 1)
                                   ))
     (cljr-add-keybindings-with-prefix "C-c C-m")
     (setq cljr-warn-on-eval nil)
      :bind ("C-c '" . hydra-cljr-help-menu/body))
    #+end_src

** Rust

   #+begin_src emacs-lisp
   (use-package racer
     :ensure t
     :config
     (add-hook 'racer-mode-hook #'company-mode)
     (setq company-tooltip-align-annotations t)
     (setq racer-rust-src-path "~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"))

   (use-package rust-mode
     :ensure t
     :config
     (add-hook 'rust-mode-hook #'racer-mode)
     (add-hook 'racer-mode-hook #'eldoc-mode)
     (setq rust-format-on-save t))

   (use-package cargo
     :ensure t
     :config
     (setq compilation-scroll-output t)
     (add-hook 'rust-mode-hook 'cargo-minor-mode))

   (use-package flycheck-rust
     :ensure t
     :config
     (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
     (add-hook 'rust-mode-hook 'flycheck-mode))
   #+end_src
* Org Mode Tweaks

** Org Bullets

Nice bullets instead of  asterik

#+begin_src emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Common Setting

Some common setting

#+begin_src emacs-lisp
(setq org-ellipsis " ")
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-confirm-babel-evaluate nil)
(setq org-export-with-smart-quotes t)
(setq org-src-window-setup 'current-window)
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Line Wrap

Wrap a line

#+begin_src emacs-lisp
(add-hook 'org-mode-hook
	    '(lambda ()
	       (visual-line-mode 1)))
#+end_src

* Diminish

#+begin_src emacs-lisp
(use-package diminish
  :ensure t
  :init
  (diminish 'which-key-mode)
  (diminish 'linum-relative-mode)
  (diminish 'hungry-delete-mode)
  (diminish 'visual-line-mode)
  (diminish 'subword-mode)
  (diminish 'beacon-mode)
  (diminish 'irony-mode)
  (diminish 'page-break-lines-mode)
  (diminish 'auto-revert-mode)
  (diminish 'rainbow-delimiters-mode)
  (diminish 'rainbow-mode)
  (diminish 'yas-minor-mode)
  (diminish 'flycheck-mode)
  (diminish 'helm-mode))  
#+end_src
* Infrastructure

** JSON-Mode

   #+begin_src emacs-lisp
   (use-package json-mode
     :ensure t
     :config
     (customize-set-variable 'json-mode-hook
                             #'(lambda ()
                                 (setq tab-width 2))))
   #+end_src

** YAML-Mode

   #+begin_src 
   (use-package yaml-mode
     :ensure t)
   #+end_src

** Docker

   #+begin_src emacs-lisp
   (use-package docker
     :ensure t
     :bind (("C-c d c" . docker-containers)
            ("C-c d i" . docker-images)))
   #+end_src

** Dockerfile

   #+begin_src emacs-lisp
   (use-package dockerfile-mode
     :ensure t)
   #+end_src

** Kubernetes

#+begin_src emacs-lisp
   (use-package kubernetes
     :ensure t
     :commands (kubernetes-overview))
#+end_src

#+begin_src emacs-lisp 
  (use-package k8s-mode
    :ensure t
    :hook (k8s-mode . yas-minor-mode))
#+end_src

#+RESULTS:
| yas-minor-mode |

** Terraform

   #+begin_src emacs-lisp 
   (use-package terraform-mode
      :ensure t)
   #+end_src
