#+STARTUP: overview
#+TITLE: myemacs
#+CREATOR: abhishek anand amralkar
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+auto_tangle: t

[[https://www.gnu.org/licenses/gpl-3.0][https://img.shields.io/badge/License-GPL%20v3-blue.svg]]

* namaste!

This is my Emacs configuration that is written in Org Mode. README.org generates init.el which Emacs loads up.

[[./images/emacs.png]]

* speed up

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun myemacs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'myemacs/display-startup-time)
#+end_src

* tangle

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :load-path "site-lisp/org-auto-tangle/"
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

* installation

git clone https://github.com/abhishekamralkar/myemacs ~/.emacs.d

To use you should remove your own ~/.emacs and your ~/.emacs.d prior to cloning this configuration. 

* about me

#+begin_src emacs-lisp
(setq user-full-name "Abhishek Anand Amralkar"
  user-mail-address "abhishekamralkar@gmail.com")
#+end_src

* use-package

The use-package macro allows you to isolate package configuration in your .emacs file in a way that is both performance-oriented and, well, tidy. 

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			    ("org"   . "https://orgmode.org/elpa/")
			    ("elpa"  . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents 
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))  
#+end_src

* automatic package updates

With auto-package-update package we can keep emacs upto date

#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src

* theme and font

Using Doom Emacs theme 

#+begin_src emacs-lisp
(use-package doom-themes
  :defer t
  :init (load-theme 'doom-palenight t))
#+end_src

Using JetBrains fonts

#+begin_src emacs-lisp
  (defvar myemacs/d-default-font-size 180)
  (defvar myemacs/d-default-variable-font-size 180)
  (defvar myemacs/l-default-font-size 160)
  (defvar myemacs/l-default-variable-font-size 160)
  (defvar myemacs/frame-transparency '(90 . 90))
  (defvar myemacs/fonts "JetBrains Mono")
  (defvar myemacs/weight 'regular)

    (if (eq system-type 'darwin)
        (set-face-attribute 'default nil :font myemacs/fonts :height myemacs/d-default-font-size :weight myemacs/weight)
                 (set-face-attribute 'default nil :font myemacs/fonts :height myemacs/l-default-font-size :weight myemacs/weight))

    (if (eq system-type 'darwin)
           ;; Set the fixed pitch face
        (set-face-attribute 'fixed-pitch nil :font myemacs/fonts :height myemacs/d-default-font-size :weight myemacs/weight)
                 (set-face-attribute 'fixed-pitch nil :font myemacs/fonts :height myemacs/l-default-font-size :weight myemacs/weight))

    (if (eq system-type 'darwin)
        ;; Set the variable pitch face
        (set-face-attribute 'variable-pitch nil :font myemacs/fonts :height myemacs/d-default-font-size :weight myemacs/weight)
      (set-face-attribute 'variable-pitch nil :font myemacs/fonts :height myemacs/l-default-font-size :weight myemacs/weight))
#+end_src

#+begin_src emacs-lisp
(use-package ac-emoji
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package ligature
  :load-path "~/.emacs.d/ligatures/"
  :config
  (ligature-set-ligatures 'prog-mode '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->" "///" "/=" "/=="
                                      "/>" "//" "/*" "*>" "***" "*/" "<-" "<<-" "<=>" "<=" "<|" "<||"
                                      "<|||" "<|>" "<:" "<>" "<-<" "<<<" "<==" "<<=" "<=<" "<==>" "<-|"
                                      "<<" "<~>" "<=|" "<~~" "<~" "<$>" "<$" "<+>" "<+" "</>" "</" "<*"
                                      "<*>" "<->" "<!--" ":>" ":<" ":::" "::" ":?" ":?>" ":=" "::=" "=>>"
                                      "==>" "=/=" "=!=" "=>" "===" "=:=" "==" "!==" "!!" "!=" ">]" ">:"
                                      ">>-" ">>=" ">=>" ">>>" ">-" ">=" "&&&" "&&" "|||>" "||>" "|>" "|]"
                                      "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||" ".." ".?" ".=" ".-" "..<"
                                      "..." "+++" "+>" "++" "[||]" "[<" "[|" "{|" "??" "?." "?=" "?:" "##"
                                      "###" "####" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" ";;" "_|_"
                                      "__" "~~" "~~>" "~>" "~-" "~@" "$>" "^=" "]#"))
  (global-ligature-mode t))
#+end_src

* emacs configuration

** no startup screen

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

** no toolbar

#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

** no menubar

#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src

** no scrollbar

#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src

** no ringing bells

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)  
#+end_src

** utf-8 encoding

#+begin_src emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)   
#+end_src

** no backup please!

#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)   
#+end_src

** y for yes and n for no

#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
    (dashboard-setup-startup-hook))
#+end_src

#+begin_src emacs-lisp
;; Set the title
(setq dashboard-banner-logo-title "Welcome to AAA Emacs ")

;; Content is not centered by default. To center, set
(setq dashboard-center-content t)

;; To disable shortcut "jump" indicators for each section, set
(setq dashboard-show-shortcuts nil)

(setq dashboard-items '((recents  . 5)
                        (bookmarks . 5)
                        (projects . 5)
                        (agenda . 5)
                        (registers . 5)))
#+end_src

** modeline

With modeline we can enhance the Emacs look and feel. Spacemacs spaceline is awesome. I tried spaceline but doom-modeline is best. This package is able to display icons
if all-the-icons packageand required fonts are installed.Run M-x all-the-icons-install-fonts to install the necessary fonts. Please refer to the installation guide.

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package nerd-icons
    :ensure t)
#+end_src

** cursor position

Show the current line and column for your cursor.

#+begin_src emacs-lisp
(setq line-number-mode t)
(setq column-number-mode t)   
#+end_src

** which-key

which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.
For example, after enabling the minor mode if you enter C-x and wait for the default of 1 second the minibuffer will expand with all of the
available key bindings that follow C-x (or as many as space allows given your settings).

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))   
#+end_src

** dired-sidebar

#+begin_src emacs-lisp
(use-package dired-sidebar
  :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
  :ensure t
  :commands (dired-sidebar-toggle-sidebar)
  :init
  (add-hook 'dired-sidebar-mode-hook
            (lambda ()
              (unless (file-remote-p default-directory)
                (auto-revert-mode))))
  :config
  (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
  (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

  (setq dired-sidebar-subtree-line-prefix "__")
  (setq dired-sidebar-theme 'vscode)
  (setq dired-sidebar-use-term-integration t)
  (setq dired-sidebar-use-custom-font t))
#+end_src

#+RESULTS:
: dired-sidebar-toggle-sidebar

* ivy and counsel

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))
#+end_src

* helm

#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    :config
    (defun daedreth/helm-hide-minibuffer ()
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face
                       (let ((bg-color (face-background 'default nil)))
                         `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))
    (add-hook 'helm-minibuffer-set-up-hook 'daedreth/helm-hide-minibuffer)
    (setq helm-autoresize-max-height 0
          helm-autoresize-min-height 40
          helm-M-x-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-split-window-in-side-p nil
          helm-move-to-line-cycle-in-source nil
          helm-ff-search-library-in-sexp t
          helm-scroll-amount 8 
          helm-echo-input-in-header-line t)
    :init
    (helm-mode 1))

  (helm-autoresize-mode 1)
  (define-key helm-find-files-map (kbd "C-b") 'helm-find-files-up-one-level)
  (define-key helm-find-files-map (kbd "C-f") 'helm-execute-persistent-action)
#+end_src

* hydra

#+begin_src emacs-lisp

  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
#+end_src

* projectile

Projectile is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a project level without introducing external dependencies (when feasible).

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode 1))
#+end_src

* beacon


Beacon- Whenever the window scrolls a light will shine on top of your cursor so you know where it is.

#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :config
  (beacon-mode 1))  
#+end_src

* custom

** reload

#+begin_src emacs-lisp
(defun config-reload ()
  (interactive)
  (find-file "~/.emacs.d/emacs.org"))
(global-set-key (kbd "C-c r") 'config-reload)  
#+end_src>

** edit

#+begin_src emacs-lisp
(defun config-edit ()
  (interactive)
  (find-file "~/.emacs.d/emacs.org"))
(global-set-key (kbd "C-c e") 'config-edit)
#+end_src>

** bindings

#+begin_src emacs-lisp
(global-set-key (kbd "M-<up>") 'beginning-of-buffer)
(global-set-key (kbd "M-<down>") 'end-of-buffer)
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src>

** suppress warning

#+begin_src emacs-lisp
(setq warning-minimum-level :emergency)
#+end_src

** line-mode

#+begin_src emacs-lisp
(global-hl-line-mode 1)
#+end_src

** auto-save

#+begin_src emacs-lisp
(setq auto-save-visited-file-name t)
#+end_src

** auto-refresh-dired

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

* tools
** electric

Electric Pair mode, a global minor mode, provides a way to easily insert matching delimiters: parentheses, braces, brackets, etc. Whenever you insert an opening delimiter, the matching closing delimiter is automatically inserted as well, leaving point between the two.

#+begin_src emacs-lisp
(electric-pair-mode 1)
;; make electric-pair-mode work on more brackets
(setq electric-pair-pairs '(
                            (?\" . ?\")
                            (?\{ . ?\})
                            ))
#+end_src>

** show parens

Highlights matching parens when the cursor is just behind one of them.

#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

** rainbow delimeter

Colors parentheses and other delimiters

#+begin_src emacs-lisp
(use-package rainbow-delimiters
   :ensure t
   :init
   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))   
#+end_src

** company mode

Code auto completion

#+begin_src emacs-lisp
(use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
            ("<tab>" . company-complete-selection))
            (:map lsp-mode-map
            ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
#+end_src

** flycheck

#+begin_src emacs-lisp
(use-package flycheck
   :ensure t)   
#+end_src

** yasnippet

Code template

#+begin_src emacs-lisp
(use-package yasnippet
   :ensure t
   :config
     (use-package yasnippet-snippets
       :ensure t)
     (yas-reload-all))
#+end_src

** magit

GIT client for emacs

#+begin_src emacs-lisp
(use-package magit
   :ensure t
   :bind ("C-x g" . magit))
  
(use-package forge
   :ensure t
   :after magit)
#+end_src

** projectile

Projectile is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a project level without introducing external dependencies (when feasible).

#+begin_src emacs-lisp
(use-package projectile
   :ensure t
   :init
     (projectile-mode 1))
#+end_src

** general

#+begin_src emacs-lisp
(use-package general
   :ensure t)
#+end_src

** dap-mode

#+begin_src emacs-lisp
  (use-package dap-mode
     :commands dap-debug
     :config
      ;; Bind `C-c l d` to `dap-hydra` for easy access
       (general-define-key
         :keymaps 'lsp-mode-map
         :prefix lsp-keymap-prefix
         "d" '(dap-hydra t :wk "debugger")))   
#+end_src

** exec-path-from-shell

#+begin_src emacs-lisp
(use-package exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns x))
    :config
    (setq exec-path-from-shell-variables '("PATH" "GOPATH"))
    (exec-path-from-shell-initialize))

(setenv "SHELL" "/usr/bin/zsh")
#+end_src

* languages

** lsp-mode

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook 
  (lsp-mode . lsp-enable-which-key-integration)
  :custom
  (lsp-diagnostics-provider :capf)
  (lsp-headerline-breadcrumb-enable t)
  (lsp-headerline-breadcrumb-segments '(project file symbols))
  (lsp-lens-enable nil)
  (lsp-disabled-clients '((python-mode . pyls)))
  :init
  (setq lsp-keymap-prefix "C-c l") ;; Or 'C-l', 's-l'
  :config)
#+end_src

** lsp-ui

#+begin_src emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :after lsp-mode
  :custom
  (lsp-ui-doc-show-with-cursor nil)
  :config
  (setq lsp-ui-doc-position 'bottom))
#+end_src>

** lsp-treemacs

#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after lsp)
#+end_src>

** lsp-ivy

#+begin_src emacs-lisp
(use-package lsp-ivy
  :after lsp)
#+end_src>

** python

Install python-lsp server.

#+begin_src sh
  pip3 install --user "python-language-server[all]"   
  pip3 install -U setuptools
  pip3 install pyright or
  snap install pyright --classic
#+end_src

*** pyright

#+begin_src emacs-lisp
(use-package lsp-pyright
  :hook
  (python-mode . (lambda ()
                   (require 'lsp-pyright)
                   (lsp-deferred))))
#+end_src

*** pyenv

Strongly recommend to use python virtualenv to python work properly in emacs.

Assuming venvs are installed here ~/.venvs

Learn about setting python virtual env below

https://blog.fredrikmeyer.net/2020/08/26/emacs-python-venv.html

https://ddavis.io/posts/emacs-python-lsp

You can use M-x pyvenv-activate to activate specific venv

#+begin_src emacs-lisp
(use-package pyvenv
  :ensure t
  :init
  (setenv "WORKON_HOME" "~/.venvs/")
  :config
  ;; (pyvenv-mode t)

  ;; Set correct Python interpreter
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))
#+end_src

*** formatting

#+begin_src emacs-lisp
(use-package blacken
  :init
  (setq-default blacken-fast-unsafe t)
  (setq-default blacken-line-length 80))
#+end_src

*** python-mode

#+begin_src emacs-lisp
    (use-package python-mode
      :hook
      (python-mode . pyvenv-mode)
      (python-mode . flycheck-mode)
      (python-mode . company-mode)
      (python-mode . blacken-mode)
      (python-mode . yas-minor-mode)
      :custom
      ;; NOTE: Set these if Python 3 is called "python3" on your system!
      (python-shell-interpreter "python3")
      :config)
#+end_src

** golang

If you see error gopls not able to find module in your workspace 

#+begin_src sh
M-x lsp-describe-session
M-x lsp-workspace-folders-remove
M-x lsp-workspace-folders-add
#+end_src

#+begin_src sh
# GO Path
export GOROOT=/usr/local/go
export GOPATH=$HOME/Code/golang
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
#+end_src

Install go packages and gopls 

#+begin_src sh
go install github.com/nsf/gocode@latest
go install github.com/rogpeppe/godef@latest
go install golang.org/x/tools/cmd/goimports@latest
go install golang.org/x/tools/gopls@latest
go install golang.org/x/tools/cmd/godoc@latest
#+end_src


#+begin_src emacs-lisp
  (use-package go-mode 
      :ensure t
      :custom
      (gofmt-command "goimports")
      :config
      (add-hook 'go-mode-hook #'lsp)
      (require 'dap-dlv-go)
      (add-hook 'before-save-hook 'gofmt-before-save) ; run gofmt on each save
      (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
      (add-hook 'go-mode-hook #'lsp-deferred))
#+end_src

#+begin_src emacs-lisp
(use-package go-eldoc
:ensure t
:config
(go-eldoc-setup))
#+end_src

#+begin_src emacs-lisp
(use-package exec-path-from-shell
:ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package go-guru
:ensure t
:config
(customize-set-variable 'go-guru-scope "...")
(add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))
#+end_src


#+begin_src emacs-lisp
(use-package company-go
:ensure t
:config
(add-hook 'go-mode-hook (lambda ()
			   (set (make-local-variable 'company-backends)
				     '(company-go))
				(company-mode))))
#+end_src

#+begin_src emacs-lisp
(use-package gotest
:ensure t
:bind (:map go-mode-map
                ("C-c C-t p" . go-test-current-project)
                ("C-c C-t f" . go-test-current-file)
                ("C-c C-t ." . go-test-current-test)
                ("C-c r" . go-run))
:config
    (setq go-test-verbose t))
#+end_src

** clojure

#+begin_src emacs-lisp
(use-package clojure-mode
   :defer t
   :ensure t)

(use-package cider
  :ensure t)

(use-package clj-refactor
  :ensure t
  :config
  (add-hook 'clojure-mode-hook (lambda ()
                                (clj-refactor-mode 1)
                                ))
  (cljr-add-keybindings-with-prefix "C-c C-m")
  (setq cljr-warn-on-eval nil)
   :bind ("C-c '" . hydra-cljr-help-menu/body))   
#+end_src

** bash

#+begin_src emacs-lisp
(add-hook 'shell-mode-hook 'yas-minor-mode)
(add-hook 'shell-mode-hook 'flycheck-mode)
(add-hook 'shell-mode-hook 'company-mode)

(defun shell-mode-company-init ()
  (setq-local company-backends '((company-shell
                                  company-shell-env
                                  company-etags
                                  company-dabbrev-code))))

(use-package company-shell
  :ensure t
  :config
    (require 'company)
    (add-hook 'shell-mode-hook 'shell-mode-company-init))
#+end_src

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'company-mode)

(use-package slime
  :ensure t
  :config
  (setq inferior-lisp-program "/usr/bin/sbcl")
  (setq slime-contribs '(slime-fancy)))

(use-package slime-company
  :ensure t
  :init
    (require 'company)
    (slime-setup '(slime-fancy slime-company)))
#+end_src

* org-mode
** org bullets

Nice bullets instead of  asterik

#+begin_src emacs-lisp
(use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** common setting

Some common setting

#+begin_src emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** line wrap

Wrap a line

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
              '(lambda ()
                 (visual-line-mode 1)))
#+end_src

** diminish

#+begin_src emacs-lisp
(use-package diminish
    :ensure t
    :init
    (diminish 'which-key-mode)
    (diminish 'linum-relative-mode)
    (diminish 'hungry-delete-mode)
    (diminish 'visual-line-mode)
    (diminish 'subword-mode)
    (diminish 'beacon-mode)
    (diminish 'irony-mode)
    (diminish 'page-break-lines-mode)
    (diminish 'auto-revert-mode)
    (diminish 'rainbow-delimiters-mode)
    (diminish 'rainbow-mode)
    (diminish 'yas-minor-mode)
    (diminish 'flycheck-mode)
    (diminish 'helm-mode))  
#+end_src
* infrastructure

** json-mode

#+begin_src emacs-lisp
  (use-package json-mode
     :ensure t
     :config
     (customize-set-variable 'json-mode-hook
                               '(lambda ()
                                   (setq tab-width 2))))
#+end_src

** yaml-mode

#+begin_src emacs-lisp 
  (use-package yaml-mode
       :ensure t)
#+end_src

** docker

#+begin_src emacs-lisp
  (use-package docker
       :ensure t
       :bind (("C-c d c" . docker-containers)
              ("C-c d i" . docker-images)))
#+end_src

** dockerfile

#+begin_src emacs-lisp
  (use-package dockerfile-mode
      :ensure t)
#+end_src

** kubernetes

#+begin_src emacs-lisp
   (use-package kubernetes
     :ensure t
     :commands (kubernetes-overview))
#+end_src

#+begin_src emacs-lisp 
  (use-package k8s-mode
    :ensure t
    :hook (k8s-mode . yas-minor-mode))
#+end_src

** terraform

#+begin_src emacs-lisp 
  (use-package terraform-mode
      :ensure t)
#+end_src

* file management

#+begin_src emacs-lisp

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-agho --group-directories-first")))

(use-package dired-single
  :commands (dired dired-jump))

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-open
  :commands (dired dired-jump)
  :config
  ;; Doesn't work as expected!
  ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
  (setq dired-open-extensions '(("png" . "feh")
                                ("mkv" . "mpv"))))

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode))

#+end_src


* Thanks To

My Emacs config is heavily borrowed from daviwil emacs-from-scratch

#+begin_src sh
https://github.com/daviwil/emacs-from-scratch
#+end_src>
