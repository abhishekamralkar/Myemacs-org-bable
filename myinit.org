#+title: My Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Packages
  
  Melpa Source repo for the package installation.

  #+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
  (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  #+end_src

**  Automatic Package Update
  
  #+begin_src emacs-lisp
    (use-package auto-package-update
      :custom
      (auto-package-update-interval 7)
      (auto-package-update-prompt-before-update t)
      (auto-package-update-hide-results t)
      :config
      (auto-package-update-maybe)
      (auto-package-update-at-time "09:00"))
  #+end_src

* Emacs Interface Tweaks
  
  Make Emacs UI elegant.

  #+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (set-buffer-modified-p t)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (menu-bar-mode 0)
  (column-number-mode 1)
  (global-display-line-numbers-mode t)
  (global-hl-line-mode 1)
  (show-paren-mode 1)
  (setq require-final-newline t)
  #+end_src

** Modeline
  
  doom-modeline is a better modeline

  #+begin_src emacs-lisp
  ;;M-x all-the-icons-install-fonts
  (use-package all-the-icons
    :ensure t)
  #+end_src

  #+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
  #+end_src

  #+RESULTS:

** Theme[s]

  #+begin_src emacs-lisp
  ;;(use-package zenburn-theme
  ;;:ensure t
  ;;:config (load-theme 'zenburn t))
  (use-package doom-themes
    :init (load-theme 'doom-palenight t))
  #+end_src 

  #+RESULTS:

** Fonts
   
  Fira Code font use when on Linux andd Fire code in macos.
  
  ;;(font-family-list)
  #+begin_src emacs-lisp
  (add-to-list 'default-frame-alist
        (cond
           ((string-equal system-type "darwin")    '(font . "Fira Code-14"))
           ((string-equal system-type "gnu/linux") '(font . "Fira Code-12"))))
  #+end_src

** Org Bullets

  Package to get nice bullets while in org-mode.

  #+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
  #+end_src

* Misc Packages

** Beacon Mode
   beacon-mode flashes the cursor whenever you scroll. It makes things easy to locate the cursor when scrolling

   #+begin_src emacs-lisp
   (use-package beacon
     :ensure t
     :config
     (beacon-mode 1))
   #+end_src

** Undo Tree

   #+begin_src emacs-lisp
   (use-package undo-tree
     :ensure t
     :init
     (global-undo-tree-mode))
   #+end_src:  

** Try

   Nice to have a package, if you do want to try packages before installation.

   #+begin_src emacs-lisp
   (use-package try
     :ensure t)
   #+end_src

** Which Key

   A useful package to show the key-bindings.

   #+begin_src emacs-lisp
   (use-package which-key
     :ensure t
     :config (which-key-mode))
   #+end_src

** general
   
   #+begin_src emacs-lisp
   (use-package general
     :ensure t)
   #+end_src
* counsel/ivy/swiper
  #+begin_src emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)

  (defalias 'lst-buffers 'ibuffer)

  (use-package counsel
   :ensure t
   )

  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))

  (use-package swiper
  :ensure try
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
  ))
  #+end_src

* Programming

** lsp-mode

   #+begin_src emacs-lisp
   (defun lsp-mode-setup ()
     (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
     (lsp-headerline-breadcrumb-mode))

   (use-package lsp-mode
     :commands (lsp lsp-deferred)
     :hook (lsp-mode . lsp-mode-setup)
     :init
     (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
     :config
     (lsp-enable-which-key-integration t))
   #+end_src

** lsp-ui

   #+begin_src emacs-lisp
   (use-package lsp-ui
     :hook (lsp-mode . lsp-ui-mode)
     :custom
     (lsp-ui-doc-position 'bottom))
   #+end_src

** dap-mode

   #+begin_src emacs-lisp
   (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)
     :commands dap-debug
     :config
    ;; Set up Node debugging
     (require 'dap-node)
     (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    ;; Bind `C-c l d` to `dap-hydra` for easy access
     (general-define-key
       :keymaps 'lsp-mode-map
       :prefix lsp-keymap-prefix
       "d" '(dap-hydra t :wk "debugger")))
    #+end_src

** Python

   Make sure you have the pyls language server installed before trying lsp-mode!

   pip3 install --user "python-language-server[all]"

   #+begin_src emacs-lisp
   (use-package python-mode
     :ensure t
     :hook (python-mode . lsp-deferred)
     :custom
     ;; NOTE: Set these if Python 3 is called "python3" on your system!
     (python-shell-interpreter "python3")
     (dap-python-executable "python3")
     (dap-python-debugger 'debugpy)
     :config
     (require 'dap-python))
   #+end_src
   
   #+begin_src emacs-lisp
   (use-package pyvenv
     :after python-mode
     :config
     (pyvenv-mode 1))
   #+end_src

** Company Mode
  
   #+begin_src emacs-lisp
   (use-package company
     :after lsp-mode
     :hook (lsp-mode . company-mode)
     :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
           (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
     :custom
           (company-minimum-prefix-length 1)
           (company-idle-delay 0.0))

   (use-package company-box
     :hook (company-mode . company-box-mode))
   #+end_src
   
** Projectile

  #+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Code")
    (setq projectile-project-search-path '("~/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
  #+end_src

** Magit

  Its name should be Magic
  
  #+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

    ;; NOTE: Make sure to configure a GitHub token before using this package!
    ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
    ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)
  #+end_src
** golang
 
  #+begin_src emacs-lisp
  ;;(use-package lsp-mode
  ;; :ensure t
  ;; :config
  ;; (add-hook 'before-save-hook 'gofmt-before-save)
  ;; (add-hook 'before-save-hook #'lsp-format-buffer t t)
  ;; (add-hook 'before-save-hook #'lsp-organize-imports t t))
  
 (use-package go-mode 
   :ensure t
   :config
   (add-hook 'go-mode-hook #'lsp)
   (require 'dap-dlv-go)
   
   (add-hook 'before-save-hook 'gofmt-before-save) ; run gofmt on each save
   (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
   (add-hook 'go-mode-hook #'lsp-deferred))
  #+end_src

** Rainbow Delimiter

  #+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  #+end_src

** FlyCheck
  
   #+begin_src emacs-lisp
   (use-package flycheck
     :ensure t
     :init
     (global-flycheck-mode t)) 
   #+end_src

** Yasnippet
   #+begin_src emacs-lisp
   (use-package yasnippet
     :ensure t
     :init
    (yas-global-mode 1))
   #+end_src

  
