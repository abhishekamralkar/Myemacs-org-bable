#+title: My Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Packages
  
  Melpa Source repo for the package installation.

  #+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
  (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  #+end_src

**  Automatic Package Update
  
  #+begin_src emacs-lisp
    (use-package auto-package-update
      :custom
      (auto-package-update-interval 7)
      (auto-package-update-prompt-before-update t)
      (auto-package-update-hide-results t)
      :config
      (auto-package-update-maybe)
      (auto-package-update-at-time "09:00"))
  #+end_src

  ** Modeline
  
  doom-modeline is a better modeline

  #+begin_src emacs-lisp
  ;;M-x all-the-icons-install-fonts
  (use-package all-the-icons
    :ensure t)
  #+end_src

  #+begin_src emacs-lisp
  (use-package doom-modeline
     :ensure t
     :init (doom-modeline-mode 1)
     :custom ((doom-modeline-height 15)))
  #+end_src

* interface tweaks
  
  Make Emacs UI elegant.

  #+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (set-buffer-modified-p t)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (menu-bar-mode 0)
  (column-number-mode 1)
  (global-display-line-numbers-mode t)
  (global-hl-line-mode 1)
  (show-paren-mode 1)
  (setq require-final-newline t)
  #+end_src

 
* try

  Nice to have a package, if you do want to try packages before installation.

  #+begin_src emacs-lisp
  (use-package try
    :ensure t)
  #+end_src

* which-key

  A useful package to show the key-bindings.

  #+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
  #+end_src

* org bullets

  Package to get nice bullets while in org-mode.

  #+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
  #+end_src

* counsel/ivy/swiper
  #+begin_src emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)

  (defalias 'lst-buffers 'ibuffer)

  (use-package counsel
   :ensure t
   )

  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))

  (use-package swiper
  :ensure try
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
  ))
  #+end_src

* auto complete

  #+begin_src emacs-lisp
  (use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
  #+end_src

* themes

  #+begin_src emacs-lisp
  ;;(use-package zenburn-theme
  ;;:ensure t
  ;;:config (load-theme 'zenburn t))
  (use-package doom-themes
  :init (load-theme 'doom-palenight t))
  #+end_src 

  #+RESULTS:

* fonts

  Hack font use when on Linux andd Fire code in macos.
  
  ;;(font-family-list)
  #+begin_src emacs-lisp
  (add-to-list 'default-frame-alist
             (cond
              ((string-equal system-type "darwin")    '(font . "Fira Code-14"))
              ((string-equal system-type "gnu/linux") '(font . "Fira Code-12"))))
  #+end_src

  #+RESULTS:
  : ((font . Fira Code-12) (font . Hack Regular 12))

* flycheck
  
  #+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t)) 
  #+end_src

* Python 

  All my python related changes

  #+begin_src emacs-lisp
  (use-package jedi
  :ensure t
  :init
  (add-hook 'python-mode-hook 'jedi:setup)
  (add-hook 'python-mode-hook 'jedi:ac-setup))
  
  ;(use-package elpy
  ;:ensure t
  ;:config
  ;(elpy-enable))
  #+end_src

* yasnippet

  #+begin_src emacs-lisp
  (use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1))
  #+end_src

* golang
  #+begin_src emacs-lisp
  (use-package lsp-mode
   :ensure t
   :config
   (add-hook 'before-save-hook 'gofmt-before-save)
   (add-hook 'before-save-hook #'lsp-format-buffer t t)
   (add-hook 'before-save-hook #'lsp-organize-imports t t))
  
   (use-package go-mode 
   :ensure t
   :config
   (add-hook 'go-mode-hook #'lsp)
   
   (add-hook 'before-save-hook 'gofmt-before-save) ; run gofmt on each save
   (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
   (add-hook 'go-mode-hook #'lsp-deferred)
   (add-hook 'go-mode-hook #'yas-minor-mode)
   (add-hook 'go-mode-hook 'flycheck-mode))
   #+end_src

* Undo Tree

  #+begin_src emacs-lisp
  (use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
  #+end_src:  

* Misc packages

  beacon-mode flashes the cursor whenever you scroll. It makes things easy to locate the cursor when scrolling

  #+begin_src emacs-lisp
  (use-package beacon
   :ensure t
   :config
   (beacon-mode 1))
  #+end_src

  

